#!/usr/bin/env bash

# Maintainer history of this command-line utility
#     2018.12.15 - ...: Tomek D. Loboda (tomek.loboda@gmail.com; post-doctoral research associate; original author)


version=0.1
    # IMPORTANT: This needs to be a number and that number must be at the end of the line

self_name=$(basename $0)
self_path=$(dirname $0)

github_user=momacs
github_email=momacs@pitt.edu

url_github=https://github.com/$github_user
url_github_raw=https://raw.githubusercontent.com/$github_user

cmd=$1
cmd_inf=i
usage="Usage: $self_name $cmd"


# ----------------------------------------------------------------------------------------------
#
# Args:
#   $1 prompt text
#
conf_y() {
    read -p "$1 [y] " res
    [ "$res" == "y" -o "$res" == "Y" ] && return 0 || return 1
}


# ----------------------------------------------------------------------------------------------
#
# Args:
#   $1 prompt text
#
conf_yn() {
    read -p "$1 [y/n] " res
    [ "$res" == "y" -o "$res" == "Y" ] && return 0 || return 1
}


# ----------------------------------------------------------------------------------------------
#
# Require specificed number of arguments.
#
# Args:
#   $1 number of args recieved
#   $2 number of args required
#   $3 correct usage ($self_name and $cmd should be ommited)
#
req_argn() {
    [ $1 -lt $2 ] && echo "$usage $3" && exit $ret_req_argn
    return 0
}


# ==============================================================================================
case "$cmd" in
    
    # ------------------------------------------------------------------------------------------
    "ping") echo "pong";;
    
    # ------------------------------------------------------------------------------------------
    "pram")
	prj=pram
	
        case "$2" in
	    "$cmd_inf") echo "PRAM (i.e., Probabilistic Relational Agent-based Modeling) routines.";;
	    "clone-repo")
		[ -d ./$prj ] && echo "The directory $prj already exists." && exit 1
		git clone $url_github/$prj
		;;
	    "make-venv")
		conf_yn "This will initialize a new venv called '$dir', fetch PRAM source code from GitHub into that venv, and install all the required Python packages inside of that environment.  After that, you will be able to run PRAM.  Continue?" || exit 1
		
		[ $(which python3 | wc -l | bc) == 0 ] && echo "Python 3 not found; please install it first (e.g., using '$self_name python')." && exit 1
		
		$0 python init-venv python3 $prj
		echo ""
		
		cd $prj
		source ./bin/activate
		
		git init
                git remote add origin $url_github/${prj}.git
		git pull origin master
		
		python -m pip install -r requirements.txt
		
		if conf_yn "Install the Spyder IDE inside this venv?"; then
		    python -m pip install spyder
		    
		    echo "python ./lib/python3.6/site-packages/spyder/app/start.py" >> spyder-start.sh
		    chmod a+x spyder-start.sh
		fi
		
		echo "Done."
		echo ""
		echo "The latest version of PRAM is located in $(pwd).  To run it, type:"
		echo "cd $(pwd) && source ./bin/activate && cd src"
		echo "python sim.py"
		;;
	    *) echo "$usage {$cmd_inf,clone-repo,make-env}"; exit 1;;
	esac
	;;
    
    # ------------------------------------------------------------------------------------------
    "python")
        case "$2" in
	    "$cmd_inf") echo "Python routines.";;
	    "init-macos")
		conf_yn "This will install the HomeBrew package manager (or update it, if already present) and use it to install Python 3. Continue?" || exit 1
		
		if [ $(which brew | wc -l | bc) == 0 ]; then
		    echo "HomeBrew not found, installing..."
		    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
		else
		    echo "HomeBrew found, updating..."
		    brew update
		fi
		
		brew install python3
		echo "Done."
		echo ""
		echo "You can check the version of Python 3 by typing 'python3 --version'.  All python symlinks live in /usr/local/bin/.  As a reminder, you should refrain from using your global python directly and instead develop software in virtual environments (i.e., venvs) as it promotes good isolation of python projects.  For example, installing packages in the global interpreter space should be avoided; all dependencies should be satisfied inside a dedicated venv.  To initializa a new venv, type '$self_name $2 init-venv'.  More information on venv can be found in the official Python docs (https://docs.python.org/3.6/library/venv.html)."
		;;
            "init-venv")
		req_argn $# 4 "$2 <python> <name>"
		
		[[ -d $4 ]] && { echo "Specified directory already exists."; exit 1; }
		
		ver=$($3 -c 'import platform; print(platform.python_version())' 2> /dev/null | tr -d ' ')
		if [[ "$3" != *"python"* ]] || [[ "$ver" == "" ]]; then
                    echo "Error: Incorrect Python binary provided"
		    exit 1
		fi
		
		conf_yn "Use Python $ver to create venv $4?" || exit 1
		
		$3 -m venv $4
		
		echo "Done."
		echo ""
		echo "Every time you want to do work in a particular venv, that venv needs to be activated.  This ensures that all operations like installing packages happen inside of that venv and not in the global interpreter environment."
		echo ""
		echo "To ACTIVATE the venv just created, type: 'cd $4 && source ./bin/activate'."
		echo "To CONFIRM you are using the venv's interpreter, type 'which python' and check the path."
		echo "To EXIT a venv, type 'deactivate' (or end the terminal session)."
		echo "To DELETE the venv just created, delete its directory (i.e., 'rm -r $4')."
		;;
	    "init-venv-conda")
		req_argn $# 4 "$2 <python-version> <name> \"pkg-1 pkg-2 ...\""
		
		[ $(which conda | wc -l | bc) == 0 ] && echo "Conda not found; please install it first." && exit 1
		
		conda create -n $4 python=$3 $5
		
		echo "Done."
		echo ""
		echo "Every time you want to do work in a particular venv, that venv needs to be activated.  This ensures that all operations like installing packages happen inside of that venv and not in the global interpreter environment."
		echo ""
		echo "To ACTIVATE the venv just created, type: 'source activate $4'."
		echo "To CONFIRM you are using the venv's interpreter, type 'which python' and check the path."
		echo "To EXIT a venv, type 'source deactivate' (or end the terminal session)."
		echo "To LIST all venvs, type 'conda env list'"
		echo "To DELETE a venv, type 'conda remove -n $4 --all'."
		;;
	    "install-spyder")
		[ $(echo $VIRTUAL_ENV | grep -v -e '^[[:space:]]*$' | wc -l | bc) == 0 ] && echo "This command can only be run inside a Python virtual environment (venv)." && exit 1
		
		if conf_yn "This will install the Spyder IDE inside the currently active venv. Continue?"; then
		    python -m pip install spyder
		    echo "python ./lib/python3.6/site-packages/spyder/app/start.py" >> spyder-start.sh
		    chmod a+x spyder-start.sh
		    
		    echo "Done."
		    echo ""
		    echo "Launch Spyder by typing: './spyder-start.sh'"
		fi
		;;
	    *) echo "$usage {$cmd_inf,init-macos,init-venv,init-venv-conda,install-spyder}"; exit 1;;
	esac
	;;
    
    # ------------------------------------------------------------------------------------------
    "self")
        case "$2" in
            "$cmd_inf") echo "Self-management of the $self_name commmand-line utility.";;
	    "edit") emacs -nw $0;;
            "update")
		now=$(date +"%Y.%m.%d-%H.%M.%S")
		self_name_tmp=${self_name}.new.$now.$$.$RANDOM
		
		cd $self_path
		curl -s -o $self_name_tmp $url_github_raw/misc/master/bin/momacs
                [ ! -f $self_name_tmp ] && echo "Could not reach the repository." && exit 1
		
		version_new=$(grep -e '^version=.*$' $self_name_tmp | sed -n -e 's/^version=//p')
		is_update_warranted=$(awk 'BEGIN{ print ('$version_new' > '$version') ? 1 : 0 }')
		
                if [ "$is_update_warranted" -eq "1" ]; then
		    mv $self_name $self_name-old-v$version
                    mv $self_name_tmp $self_name
		    echo "Update successful (from version $version to $version_new; old version retained)."
		else
                    rm $self_name_tmp
		    echo "No update necessary."
                fi
		;;
            *) echo "$usage {$cmd_inf,edit,update}"; exit 1;;
	esac
        ;;
    
    # ------------------------------------------------------------------------------------------
    *) echo "Commands: github ping pram python self"; exit 1;;
    
esac
