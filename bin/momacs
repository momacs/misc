#!/usr/bin/env bash

# Maintainer history of this command-line utility
#     2018.12.15 - ...: Tomek D. Loboda (tomek.loboda@gmail.com; post-doctoral research associate; original author)


version=0.50
    # IMPORTANT: This needs to be a number and that number must be at the end of the line

self_name=$(basename $0)
self_path=$(dirname $0)

github_user=momacs
github_email=momacs@pitt.edu

url_github=https://github.com/$github_user
url_github_raw=https://raw.githubusercontent.com/$github_user

ret_req_os=10
ret_req_git_remote=20
ret_req_git_repo=21
ret_req_git_url=22
ret_req_venv=30
ret_req_argn=40
ret_req_y=50
ret_req_prog=50

cmd=$1
cmd_inf=i

usage="Usage: $self_name $cmd"


# ----------------------------------------------------------------------------------------------
#
# Displays a [y/n] confirmation prompt and returns 0 only if 'y' or 'Y' is entered.
#
# Args:
#   $1 prompt text
#
conf_yn() {
    read -p "$1 [y/n] " res
    [ "$res" == "y" -o "$res" == "Y" ] && return 0 || return 1
}


# ----------------------------------------------------------------------------------------------
#
# Is the architecture 64-bit?
#
is_arch_64b() {
    return $(uname -m | grep 64 | wc -l | bc)
}


# ----------------------------------------------------------------------------------------------
#
# Is program $1 installed?
#
is_prog() {
    [ "$(which $1 | wc -l | bc)" -eq 1 ] && return 0 || return 1
}


# ----------------------------------------------------------------------------------------------
# 
# Is Python 3.6 or higher installed?
# 
is_py36() {
    if is_prog python3.6 || is_prog python3.7
    then return 0
    else return 1
    fi
}


# ----------------------------------------------------------------------------------------------
#
# Require specificed number of arguments.
#
# Args:
#   $1 number of args recieved
#   $2 number of args required
#   $3 correct usage ($self_name and $cmd should be ommited)
#
req_argn() {
    [ $1 -lt $2 ] && echo "$usage $3" && exit $ret_req_argn
    return 0
}


# ----------------------------------------------------------------------------------------------
#
# Require:
#   a) the current working directory to be a git repository
#   b) the specified git remote
#
# Args:
#   $1 the git remote required
#
req_git_repo_remote() {
    [ ! -d .git ] && echo "The current working directory is not a git repository." && exit $ret_req_git_repo
    [ "$(git config --get remote.origin.url)" != "$1" ] && echo "The required git remote not found." && exit $ret_req_git_remote
    return 0
}


# ----------------------------------------------------------------------------------------------
#
# Require the URL of a git repository (e.g., GitHub or GitLab).
#
# Args:
#   $1 the URL to be verified
#
req_git_url() {
    git ls-remote $1 2&> /dev/null
    [ "$?" -ne 0 ] && echo "The URL does not point to a git repository or you have insufficient access rights to that repository." && exit $ret_req_git_url
    return 0
}


# ----------------------------------------------------------------------------------------------
#
# Requires the OS to be $1
#
req_os() {
    [ "$(uname)" != "$1" ] && echo "Wrong operating system." && exit $ret_req_os
    return 0
}

req_os_ubuntu() {
    req_os "Linux"
    [ "$(uname -a | grep Ubuntu | wc -l | bc)" -ne 1 ] && echo "Unsupported version of Linux." && exit $ret_req_os
    return 0
}


# ----------------------------------------------------------------------------------------------
#
# Requires program $1 installed
#
req_prog() {
    is_prog $1 && echo "Required program '$1' missing." && exit $ret_req_prog
    return 0
}


# ----------------------------------------------------------------------------------------------
#
# Requires any Python venv.
#
req_venv() {
    [ $(echo $VIRTUAL_ENV | grep -v -e '^[[:space:]]*$' | wc -l | bc) == 0 ] && echo "This command can only be run inside an active Python virtual environment (venv)." && exit $ret_req_venv
    return 0
}


# ----------------------------------------------------------------------------------------------
#
# Requires a 'y' or 'Y' response.
#
# Args:
#   $1 prompt text
#   $2 message if not 'y' or 'Y' [optional]
#
req_y() {
    if ! conf_yn "$1"; then
        [ "$2" != "" ] && echo "$2"
        exit $ret_req_y
    fi
    return 0
}


# ==============================================================================================
case "$cmd" in

    # ------------------------------------------------------------------------------------------
    "conda")
        case "$2" in
            "$cmd_inf") echo "Anaconda and Miniconda routines.";;
	    "install")
		req_y "This will install Anaconda distribution. Continue?"
		
		case "$(uname)" in
		    "Darwin")  $0 $cmd _install-macos   || exit 1;;
		    "FreeBSD") $0 $cmd _install-freebsd || exit 1;;
		    "Linux")   $0 $cmd _install-ubuntu  || exit 1;;
		    *) echo "Unsupported operating system." && exit 1;;
		esac
		;;
	    "_install-freebsd")
		req_os "FreeBSD"
		echo "Anaconda currently does not support FreeBSD."
		;;
	    "_install-macos")
		req_os "Darwin"
		
		file=Anaconda3-2018.12-MacOSX-x86_64.sh
		curl -s -o $file https://repo.anaconda.com/archive/$file
		bash $file
		rm $file
		;;
	    "_install-ubuntu")
		req_os_ubuntu
		
		if [ is_64b_arch ]
		then file=Anaconda3-2018.12-Linux-x86_64.sh
		else file=Anaconda3-2018.12-Linux-x86.sh
		fi
		
		wget https://repo.anaconda.com/archive/$file
		bash $file
		rm $file
		;;
	    "install-mini")
		req_y "This will install Miniconda. Continue?"
		
		case "$(uname)" in
		    "Darwin")  $0 $cmd _install-mini-macos   || exit 1;;
		    "FreeBSD") $0 $cmd _install-mini-freebsd || exit 1;;
		    "Linux")   $0 $cmd _install-mini-ubuntu  || exit 1;;
		    *) echo "Unsupported operating system." && exit 1;;
		esac
		;;
	    "_install-mini-freebsd")
		req_os "FreeBSD"
		echo "Anaconda currently does not support FreeBSD."
		;;
	    "_install-mini-macos")
		req_os "Darwin"
		
		file=Miniconda3-latest-MacOSX-x86_64.sh
		curl -s -o $file https://repo.anaconda.com/miniconda/$file
		bash $file
		rm $file
		;;
	    "_install-mini-ubuntu")
		req_os_ubuntu
		
		if [ is_64b_arch ]
		then file=Miniconda3-latest-Linux-x86_64.sh
		else file=Miniconda3-latest-Linux-x86.sh
		fi
		
		wget https://repo.anaconda.com/miniconda/$file
		bash $file
		rm $file
		;;
	    "venv")
		case "$3" in
		    "git")
			req_argn $# 5 "$2 $3 <name> <url>"
			req_git_url $5
			req_y "This will initialize a new venv '$4', fetch source code from '$5', and install dependencies. Continue?"
			
			[[ -d $4 ]] && echo "Directory '$4' already exists." && exit 1
			
			$0 conda venv init $4 || exit 1
			source activate $4
			
			mkdir $4 && cd $4
			
			git init
			git remote add origin $5
			git pull origin master
			
			[ -f requirements.txt ] && conf_yn "Install dependencies?" && python -m pip install -r requirements.txt
			;;
		    "info")
			echo "Every time you want to do work in a particular venv, that venv needs to be activated.  This ensures that all operations like installing packages happen inside of that venv and not in the global interpreter environment."
			echo ""
			echo "To ACTIVATE a venv, type: 'source activate <venv-name>'."
			echo "To CONFIRM you are using the venv's interpreter, type 'which python' and check the path."
			echo "To EXIT a venv, type 'source deactivate' (or end the terminal session)."
			echo "To LIST all venvs, type 'conda env list'"
			echo "To DELETE a venv, type 'conda remove -n <venv-name> --all'."
			;;
		    "init")
			req_argn $# 4 "$2 $3 <name>"
			req_prog conda
			
			conda create -n $4
			;;
		    *) echo "$usage $2 {git,info,init}" && exit 1;;
		esac
		;;
	    *) echo "$usage {$cmd_inf,install,install-mini,venv}" && exit 1;;
	esac
	;;
    
    # ------------------------------------------------------------------------------------------
    "latex")
	case "$2" in
	    "$cmd_inf") echo "LaTeX document preparation system routines.";;
	    "install-minted")
		req_y "This will install the 'minted' highlighted source code package. Continue?"
		
		pip install Pygments
		
		sudo tlmgr update -self
		sudo tlmgr install minted fvextra
		
		echo ""
		echo "Add '--shell-escape' command-line argument to pdftex and pdflatex in your editor for minted to work. Below is a minimal working example."
		echo ""
		echo "\documentclass{article}"
		echo "\usepackage{minted}"
		echo "\begin{document}"
		echo "\begin{minted}{python}"
		echo "import numpy as np"
		echo "print('hi')"
		echo "\end{minted}"
		echo "\end{document}"
		echo ""
		echo "More information available at:"
		echo "    https://github.com/gpoore/minted"
		echo "    https://github.com/gpoore/minted/blob/master/source/minted.pdf"
		;;
	    *) echo "$usage {$cmd_inf,install-minted}" && exit 1;;
	esac
    ;;
    
    # ------------------------------------------------------------------------------------------
    "ping") echo "pong";;
    
    # ------------------------------------------------------------------------------------------
    "pram")
        case "$2" in
	    "$cmd_inf") echo "Probabilistic Relational Agent-based Modeling routines (more info at: https://github.com/momacs/pram).";;
	    "clone")
		[ -d ./$cmd ] && echo "The directory $cmd already exists." && exit 1
		git clone $url_github/$cmd
		;;
	    "setup")
		$0 python install || exit 1
		$0 sys install-git || exit 1
		
		if [ "$(uname)" == "FreeBSD" ]; then
		    $0 $cmd _setup-freebsd
		    exit 0
		fi
		
		$0 python venv git python3 $cmd $url_github/${cmd}.git 1 || exit 1
		
		echo "Done."
		echo ""
		echo "The latest version of PRAM is located in '$cmd' directory.  To run it, type:"
		echo "source $cmd/bin/activate"
		echo "python $cmd/src/sim.py"
		echo ""
		echo "To deactivate the '$cmd' venv, type 'deactivate'.  For more info on Python venvs, type '$self_name python venv info'."
		;;
	    "setup-conda")
		$0 conda venv git $cmd $url_github/${cmd}.git || exit 1
		
		echo "Done."
		echo ""
		echo "The latest version of PRAM is located in '$cmd' directory.  To run it, type:"
		echo "source activate $cmd"
		echo "python $cmd/src/sim.py"
		echo ""
		echo "To deactivate the '$cmd' venv, type 'source deactivate'.  For more info on conda venvs, type '$self_name conda venv info'."
		;;
	    "_setup-freebsd")
		req_y "This will install pram dependencies (i.e., scipy, numpy, and attrs) in the global Python interpreter (not a venv) and clone the GitHub repository. This is only currently supported way of running pram on FreeBSD. Effort will be exerted to ameliorate the situation."
		
		#sudo pkg install blas lapack
		#[ ! -f /usr/local/bin/gfortran ] && ln -s /usr/local/bin/gfortran43 /usr/local/bin/gfortran
		
		sudo pkg install -y git py36-scipy py36-numpy
		sudo python3.6 -m pip install attrs
		$0 $cmd clone
		;;
	    "update" | "update-conda")
		req_git_repo_remote $url_github/${cmd}.git
		req_y "This will download the most recent version of PRAM from GitHub.  It will overwrite any changes you've made to the 'src' directory. Continue?"
		
		git pull origin master
		;;
	    *) echo "$usage {$cmd_inf,clone,setup,setup-conda,update,update-conda}" && exit 1;;
	esac
	;;
    
    # ------------------------------------------------------------------------------------------
    "python")
        case "$2" in
	    "$cmd_inf") echo "Python routines.";;
	    "install")
		case "$(uname)" in
		    "Darwin")  $0 $cmd _install-macos   || exit 1;;
		    "FreeBSD") $0 $cmd _install-freebsd || exit 1;;
		    "Linux")   $0 $cmd _install-ubuntu  || exit 1;;
		    *) echo "Unsupported operating system." && exit 1;;
		esac
		
		echo "Done. All python symlinks are located in /usr/local/bin"
		;;
	    "_install-freebsd")
		req_os "FreeBSD"
		req_y "This will install Python 3 (unless already present). Continue?"
		
		sudo pkg install -y python36 py36-pip
		sudo python3.6 -m pip install --upgrade pip
		;;
	    "_install-macos")
		req_os "Darwin"
		req_y "This will install the HomeBrew package manager (or update it, if already present) and use it to install Python 3. Continue?"
		
		if ! is_prog brew; then
		    echo "HomeBrew not found, installing..."
		    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
		else
		    echo "HomeBrew found, updating..."
		    brew update
		fi
		
		brew install python3
		;;
	    "_install-ubuntu")
		req_os_ubuntu
		req_y "This will install Python 3 (unless already present). Continue?"
		
		#sudo apt install -y build-essential libssl-dev libffi-dev python-dev
		sudo apt install -y python3 python3-pip python3-venv
		
		sudo python3 -m pip install --upgrade pip
		;;
	    "_install-ubuntu-opt")
		req_os_ubuntu
		req_y "This will download and compile Python 3.6.3 with optimizations enabled. Continue?"
		
                mkdir -p ~/dev/py
                cd ~/dev/py
		wget https://www.python.org/ftp/python/3.6.3/Python-3.6.3.tar.xz
		tar -xvf Python-3.6.3.tar.xz
                rm Python-3.6.3.tar.xz
		
		ncores=$(cat /proc/cpuinfo | grep processor | wc -l)
                cd Python-3.6.3
                ./configure --enable-optimizations
		sudo make -j$ncores
                sudo make install
                # sudo make altinstall  # preserve the current python
		
		sudo apt-get install zlib1g-dev
		curl https://bootstrap.pypa.io/get-pip.py | sudo -H python3.6
                #sudo apt-get install python3-venv
		;;
	    "install-spyder")
		req_venv
		req_y "This will install the Spyder IDE inside the currently active venv (i.e., '$VIRTUAL_ENV'). Continue?"
		
		python -m pip install spyder
		echo "python ./lib/python3.6/site-packages/spyder/app/start.py" >> spyder-start.sh
		chmod a+x spyder-start.sh
		
		echo "Done."
		echo ""
		echo "Launch Spyder by typing: './spyder-start.sh'"
		;;
	    "venv")
		case "$3" in
		    "git")
			req_argn $# 6 "$2 $3 <python> <name> <url>"
			req_git_url $6
			req_y "This will initialize a new venv '$5', fetch source code from '$6', and install dependencies. Continue?"
			
			$0 python venv init $4 $5 || exit 1
			
			cd $5
			source ./bin/activate
			
			git init
			git remote add origin $6
			git pull origin master
			
			[ -f requirements.txt ] && conf_yn "Install dependencies?" && python -m pip install -r requirements.txt
			;;
		    "info")
			echo "Every time you want to do work in a particular venv, that venv needs to be activated.  This ensures that all operations like installing packages happen inside of that venv and not in the global interpreter environment."
			echo ""
			echo "To ACTIVATE a venv, enter its directory and type: 'source ./bin/activate'."
			echo "To CONFIRM you are using the venv's interpreter, type 'which python' and check the path."
			echo "To EXIT a venv, type 'deactivate' (or end the terminal session)."
			echo "To DELETE a venv, delete its directory (i.e., 'rm -r <dir-name>')."
			;;
		    "init")
			req_argn $# 5 "$2 $3 <python> <name> [do-force? 1=yes]"
			
			[[ -d $5 ]] && echo "Directory '$5' already exists." && exit 1
			
			ver=$($4 -c 'import platform; print(platform.python_version())' 2> /dev/null | tr -d ' ')
			if [[ "$4" != *"python"* ]] || [[ "$ver" == "" ]]; then
			    echo "Incorrect Python binary provided."
			    exit 1
			fi
			
			[ "$5" != "1" ] && req_y "Use Python $ver to create venv '$5'?"
			
			$4 -m venv $5
			;;
		    *) echo "$usage $2 {git,info,init}" && exit 1;;
		esac
		;;
	    *) echo "$usage {$cmd_inf,install,install-spyder,venv}" && exit 1;;
	esac
	;;
    
    # ------------------------------------------------------------------------------------------
    "self")
        case "$2" in
            "$cmd_inf") echo "Self-management of the $self_name commmand-line utility. Supported operating systems: FreeBSD, MacOS, and Ubuntu.";;
	    "edit") emacs -nw $0;;
	    "remove-old-versions")
		req_y "This will remove all previously retained versions of $self_name. Continue?"
		rm $self_path/$self_name-old-v*
		;;
            "update")
		now=$(date +"%Y.%m.%d-%H.%M.%S")
		self_name_tmp=${self_name}.new.$now.$$.$RANDOM
		
		cd $self_path
		curl -s -o $self_name_tmp $url_github_raw/misc/master/bin/momacs?now=$now
                [ ! -f $self_name_tmp ] && echo "Could not reach the repository." && exit 1
		
		version_new=$(grep -e '^version=.*$' $self_name_tmp | sed -n -e 's/^version=//p')
		is_update_warranted=$(awk 'BEGIN{ print ('$version_new' > '$version') ? 1 : 0 }')
		
		if [ "$is_update_warranted" -eq "1" ]; then
		    mv ./$self_name ./$self_name-old-v$version
                    mv ./$self_name_tmp ./$self_name
		    chmod a+x ./$self_name
		    echo "Update successful (from version $version to $version_new; old version retained)."
		else
                    rm ./$self_name_tmp
		    echo "No update necessary."
                fi
		;;
	    "version") echo "$version";;
            *) echo "$usage {$cmd_inf,edit,update,remove-old-versions,version}" && exit 1;;
	esac
        ;;
    
    # ------------------------------------------------------------------------------------------
    "sys")
        case "$2" in
            "$cmd_inf") echo "General system management and routines.";;
	    "install-git")
		is_prog git && exit 0
		
		case "$(uname)" in
		    "FreeBSD") sudo pkg install -y git;;
		    "Linux")   sudo apt install -y git;;
		esac
		;;
            *) echo "$usage {$cmd_inf,install-git}" && exit 1;;
	esac
        ;;
    
    # ------------------------------------------------------------------------------------------
    *) echo "Commands: conda latex ping pram python self sys" && exit 1;;
    
esac
